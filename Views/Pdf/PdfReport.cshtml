@{
    Layout = null;
}
@using LegacyTest.Models.ReportAux

@model ResponseReport

<!DOCTYPE html>
<html lang="es-co">
<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Barlow:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <link href="~/css/legacy-bootstrap.css" rel="stylesheet" />
    <link href="~/css/legacy-color.css" rel="stylesheet" />
    <link href="~/lib/bootstrap-icons/font/bootstrap-icons.min.css" rel="stylesheet" />
</head>
<body>

    <style>
        .frontpage {
            position: relative;
            width: 215.9mm;
            height: 279.4mm;
            background-image: url('@Url.Content("~/img/brochure1.svg")');
            background-size: 215.9mm 279.4mm;
            background-repeat: no-repeat;
            background-position: center;
            page-break-after: always;
        }

        .table-contents {
            position: relative;
            width: 215.9mm;
            height: 279.4mm;
            background-image: url('@Url.Content("~/img/brochure2.svg")');
            background-size: 215.9mm 279.4mm;
            background-repeat: no-repeat;
            background-position: center;
            page-break-after: always;
        }

        .content-frontpage {
            position: absolute;
            top: 0;
            left: 0;
            padding: 150mm 10mm 5mm 10mm;
            z-index: 1;
        }

        .content-table {
            position: absolute;
            top: 0;
            left: 0;
            padding: 100mm 10mm 25mm 40mm;
            z-index: 1;
        }

        .page3 {
            position: relative;
            width: 215.9mm;
            height: 279.4mm;
            background-image: url('@Url.Content("~/img/brochure3.svg")');
            background-size: 215.9mm 279.4mm;
            background-repeat: no-repeat;
            background-position: center;
            page-break-after: always;
        }

        .page4 {
            position: relative;
            width: 215.9mm;
            height: 279.4mm;
            background-image: url('@Url.Content("~/img/brochure4.svg")');
            background-size: 215.9mm 279.4mm;
            background-repeat: no-repeat;
            background-position: center;
            page-break-after: always;
        }

        .page5 {
            position: relative;
            width: 215.9mm;
            height: 279.4mm;
            background-image: url('@Url.Content("~/img/brochure5.svg")');
            background-size: 215.9mm 279.4mm;
            background-repeat: no-repeat;
            background-position: center;
            page-break-after: always;
        }

        .page6 {
            position: relative;
            width: 215.9mm;
            height: 279.4mm;
            background-image: url('@Url.Content("~/img/brochure6.svg")');
            background-size: 215.9mm 279.4mm;
            background-repeat: no-repeat;
            background-position: center;
            page-break-after: always;
        }

        .page8 {
            position: relative;
            width: 215.9mm;
            height: 279.4mm;
            background-image: url('@Url.Content("~/img/brochure8.svg")');
            background-size: 215.9mm 279.4mm;
            background-repeat: no-repeat;
            background-position: center;
            page-break-after: always;
        }

        .page9 {
            position: relative;
            width: 215.9mm;
            height: 279.4mm;
            background-image: url('@Url.Content("~/img/brochure9.svg")');
            background-size: 215.9mm 279.4mm;
            background-repeat: no-repeat;
            background-position: center;
            page-break-after: always;
        }

        .page {
            position: relative;
            width: 215.9mm;
            height: 279.4mm;
            background-image: url('@Url.Content("~/img/brochure.svg")');
            background-size: 215.9mm 279.4mm;
            background-repeat: no-repeat;
            background-position: top;
            page-break-after: always;
        }

        .content {
            position: relative;
            padding: 40mm 10mm 25mm 40mm;
            z-index: 5;
            box-sizing: border-box;
        }

        .title-page {
            position: absolute;
            top: 15mm;
            left: 40mm;
            right: 75mm;
            z-index: 1;
            box-sizing: border-box;
        }

    </style>

    <div class="frontpage">
        <div class="content-frontpage container-fluid d-flex flex-column" style="min-height: 100vh;">
            <div class="row justify-content-center mt-3">
                <div class="col-12 text-center">
                    <h4 style="line-height: 1.25; max-width: 80mm; margin: 0 auto;" class="blue2 fw-bold">@Model.Form.NameForm</h4>
                    <p class="text-white">@DateTime.Now.ToString("yyyy/MM/dd")</p>
                </div>
            </div>
            <div class="row mt-auto">
                <div class="col-12 text-end">
                    <h3 style="line-height: 1.25; max-width: 100mm; margin-left: auto;" class="fw-bold blue2">EMPRESA DEMO</h3>
                </div>
            </div>
        </div>
    </div>

    <div class="table-contents">
        <div class="content-table container-fluid">
            <div class="row">
                <div class="col-12">
                    <p class="blue2 fw-bold fs-2 ">1. Definición formulario: @Model.Form.NameForm</p>
                    <p class="blue2 fw-bold fs-2 ">2. Diagnóstico actual de la empresa</p>
                    <p class="blue2 fw-bold fs-2 ">3. Efectos y recomendaciones</p>
                </div>
            </div>
        </div>
    </div>

    <div class="page3"></div>
    <div class="page4"></div>
    <div class="page5"></div>
    <div class="page6"></div>

    @{
        int rowsPerPage = Model.RowsPerPage;
        int totalRows = Model.Scales.Count();
        int currentPage = 0;
        int remainingRows = totalRows;
        bool pageBreak = false;
    }

    <div class="page">
        <div class="title-page">
            <h5 style="line-height: 1.5; max-width: 100mm; margin: 0 auto;" class="fw-bold blue2">1. Definición Formulario: <br /> @Model.Form.NameForm</h5>
        </div>

        <div class="content container-fluid">
            <div class="row mb-2">
                <div class="col-12">
                    <p class="text-justify">@Model.Form.DescriptionReport</p>
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-12">
                    @if (Model.Scales.Count() > 0)
                    {
                        <table class="table table-bordered" style="page-break-inside: avoid;">
                            <thead class="text-white bg-blue2">
                                <tr>
                                    <th class="text-center w-25">@Model.Scales.Distinct().Select(x => x.Title.ToUpper()).FirstOrDefault()</th>
                                    <th class="text-center w-75" scope="col">DESCRIPCIÓN</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var scale in @Model.Scales.Take(rowsPerPage))
                                {
                                    <tr>
                                        <td class="text-center w-20 p-2">@scale.Category</td>
                                        <td class="text-justify w-80 p-2">@scale.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>

    @{
        remainingRows -= rowsPerPage;
        currentPage++;
    }

    @while (remainingRows > 0)
    {
        <div class="page">
            <div class="content container-fluid">
                <div class="row mb-1">
                    <div class="col-12">
                        <table class="table table-bordered" style="page-break-inside: avoid;">
                            <thead class="text-white bg-blue2">
                                <tr>
                                    <th class="text-center w-20">@Model.Scales.Distinct().Select(x => x.Title.ToUpper()).FirstOrDefault()</th>
                                    <th class="text-center w-80" scope="col">DESCRIPCIÓN</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var scale in @Model.Scales.Skip(currentPage * rowsPerPage).Take(rowsPerPage))
                                {
                                    <tr>
                                        <td class="w-25 p-3 text-center">@scale.Category</td>
                                        <td class="text-justify w-75 p-3">@scale.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

       
        remainingRows -= rowsPerPage;
        currentPage++;
        

        if (remainingRows > 0)
        {
            <div style="page-break-after: always;"></div>
        }
    }

    <div class="page">
        <div class="title-page">
            <h5 style="line-height: 1.5; max-width: 100mm; margin: 0 auto;" class="fw-bold blue2">2. Diagnóstico Actual</h5>
        </div>
        <div class="content container-fluid">
            <div class="row">
                <div class="col-12">
                    @{
                        string path = $"~/Views/Pdf/_chart{@Model.Form.Id}.cshtml";
                        @Html.Partial(path)
                    }
                </div>
            </div>
        </div>
    </div>

    @{
        int cardsPerSet = Model.CardsPerSet;
        int totalCombinedCards = Model.CombinedResults.Count();
        int totalPages = (int)Math.Ceiling((double)totalCombinedCards / cardsPerSet);
    }

    @for (int pageIndex = 0; pageIndex < totalPages; pageIndex++)
    {
        <div class="page">
            <div class="title-page">
                <h5 style="line-height: 1.5; max-width: 100mm; margin: 0 auto;" class="fw-bold blue2">3. Efectos y Recomendaciones</h5>
            </div>
            <div class="content container-fluid">
                @foreach (var item in Model.CombinedResults.Skip(pageIndex * cardsPerSet).Take(cardsPerSet))
                {
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header bg-blue1 text-white fw-bold">
                                    @item.Characterization
                                    <div class="progress mt-2" id="progress-@item.IdCharacterization" role="progressbar" aria-label="Example with label" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" hidden>
                                        <div class="progress-bar" style="width: 0%">0%</div>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row mb-1">
                                        <div class="col-12">
                                            <div class="card">
                                                <div class="card-header bg-light-gray fw-bold">
                                                    Efectos
                                                </div>
                                                <div class="card-body">
                                                    @foreach (var effect in item.Effects)
                                                    {
                                                        <div class="effect-item text-justify">
                                                            <strong>@effect.EffectType</strong><br />
                                                            @effect.EffectDescription
                                                        </div>

                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-12">
                                            <div class="card">
                                                <div class="card-header bg-blue text-white fw-bold">
                                                    Recomendaciones
                                                </div>
                                                <div class="card-body">
                                                    @foreach (var recommendation in item.Recommendations)
                                                    {
                                                        <div class="recommendation-item text-justify">
                                                            <strong>@recommendation.RecommendationType</strong><br />
                                                            @recommendation.RecommendationDescription
                                                        </div>

                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <div class="page8"></div>

    <div class="page9"></div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/chart.js/dist/chart.umd.min.js"></script>
    <script src="~/lib/chartjs-chart-matrix/dist/chartjs-chart-matrix.min.js"></script>
    <script src="~/lib/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.min.js"></script>
    <script src="~/lib/chartjs-plugin-annotation/dist/chartjs-plugin-annotation.min.js"></script>
    <script src="~/js/main.js"></script>
    <script>
        var param = @Model.IdCompany
    </script>
    <script src="~/js/pdf/chart@(Model.Form.Id).js"></script>

</body>
</html>
